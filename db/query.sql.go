// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createControlUser = `-- name: CreateControlUser :one
INSERT INTO control.user
    (
    email, username, first_name, last_name, password
    )
    VALUES
    (
    $1, $2, $3, $4, $5
    )
RETURNING id, created_at, update_at, revoked_at, email, username, first_name, last_name, password
`

type CreateControlUserParams struct {
	Email     pgtype.Text
	Username  pgtype.Text
	FirstName string
	LastName  string
	Password  string
}

func (q *Queries) CreateControlUser(ctx context.Context, arg CreateControlUserParams) (ControlUser, error) {
	row := q.db.QueryRow(ctx, createControlUser,
		arg.Email,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Password,
	)
	var i ControlUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.RevokedAt,
		&i.Email,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Password,
	)
	return i, err
}

const listControlUsers = `-- name: ListControlUsers :many
SELECT
    id, created_at, update_at, revoked_at, email, username, first_name, last_name, password
FROM
    control.user
`

func (q *Queries) ListControlUsers(ctx context.Context) ([]ControlUser, error) {
	rows, err := q.db.Query(ctx, listControlUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ControlUser
	for rows.Next() {
		var i ControlUser
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdateAt,
			&i.RevokedAt,
			&i.Email,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
